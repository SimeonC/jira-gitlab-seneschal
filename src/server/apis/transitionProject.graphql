type IdType {
  id: String!
}

input IdInput {
  id: String!
}

type MappingIssueType {
  id: Int
  projectId: String!
  gitlabLabel: String
  closedStatusId: String
  issueTypeId: String
}

input MappingIssueTypeInput {
  id: Int
  projectId: String!
  gitlabLabel: String
  closedStatusId: String
  issueTypeId: String
}

type MappingStatuses {
  id: Int
  projectId: String!
  gitlabLabel: String
  issueTypeId: String
  statusId: String
}

input MappingStatusesInput {
  id: Int
  projectId: String!
  gitlabLabel: String
  issueTypeId: String
  statusId: String
}

type MappingVersion {
  id: Int
  projectId: String!
  milestoneId: String
  versionId: String
}

input MappingVersionInput {
  id: Int
  projectId: String!
  milestoneId: String
  versionId: String
}

type MappingComponent {
  id: Int!
  projectId: String!
  gitlabLabel: String
  componentId: String
}

input MappingComponentInput {
  id: Int
  projectId: String!
  gitlabLabel: String
  componentId: String
}

type MappingPriority {
  id: Int
  projectId: String!
  gitlabLabel: String
  priorityId: String
}

input MappingPriorityInput {
  id: Int
  projectId: String!
  gitlabLabel: String
  priorityId: String
}

input TransitionProjectMappingInput {
  jiraProjectId: String
  defaultComponentIds: [String!]
  defaultIssueTypeId: String
  defaultIssueTypeClosedStatusId: String
  defaultResolutionId: String
}

type TransitionProjectMapping {
  jiraProjectId: String
  defaultComponentIds: [String!]
  defaultIssueTypeId: String
  defaultIssueTypeClosedStatusId: String
  defaultResolutionId: String
}

type MappingMilestone {
  id: Int!
  iid: Int!
  projectId: Int
  groupId: Int
  title: String!
  description: String!
  state: String!
  dueDate: String
  startDate: String
  webUrl: String!
}
