#import ./apis/gitlab.graphql
#import ./apis/jira.graphql
#import ./apis/transitionProject.graphql
#import ./apis/webhooks.graphql

type LoadGitlabProject {
  meta: GitlabProject!
  issues: [GitlabIssue!]
  labels: [String!]
  milestones: [GitlabMilestone!]
  users: [GitlabUser!]
}

type ProcessingProject {
  projectId: String
  isProcessing: Boolean
  isLoading: Boolean
  completedCount: Int
  failedCount: Int
  totalCount: Int
  currentMessage: String
  currentIssueIid: String
  meta: GitlabProject
}

type FailureConfig {
  url: String
  data: String
}

type QueueElement {
  projectId: String
  issueIid: String
}

type ProcessingFailure {
  queueElement: QueueElement!
  error: String
  config: FailureConfig
}

type SuccessResponse {
  success: Boolean
}

type IsSetupResponse {
  success: Boolean
  currentUrl: String
  username: String
}

type AppSettings {
  useGlances: String
}

type DevToolsStatus {
  status: String
}

type Queries {
  appSettings: AppSettings
  isSetup: IsSetupResponse
  devToolsStatus: DevToolsStatus
  jiraProjects: [JiraProject!]!
  gitlabProjects: [GitlabProject!]!
  processingFailures: [ProcessingFailure]
  processingProjects: [ProcessingProject]
  processingProject(gitlabProjectId: String!): ProcessingProject
  projectMapping(gitlabProjectId: String!): TransitionProjectMapping
  projectMappingComponents(gitlabProjectId: String!): [MappingComponent!]
  projectMappingIssueTypes(gitlabProjectId: String!): [MappingIssueType!]
  projectMappingPriorities(gitlabProjectId: String!): [MappingPriority!]
  projectMappingStatuses(gitlabProjectId: String!): [MappingStatuses!]
  projectMappingVersions(gitlabProjectId: String!): [MappingVersion!]
  projectIssues(gitlabProjectId: String!): [GitlabIssue!]!
  projectMeta(gitlabProjectId: String!): GitlabProject
  projectLabels(gitlabProjectId: String!): [String!]!
  projectMilestones(gitlabProjectId: String!): [MappingMilestone!]!
  projectUsers(gitlabProjectId: String!): [GitlabUser!]!
  jiraIssueTypes(projectId: String!): [JiraIssueType!]!
  jiraVersions(projectId: String!): [JiraVersion!]!
  jiraComponents(projectId: String!): [JiraComponent!]!
  jiraStatuses: [JiraStatus!]!
  jiraResolutions: [JiraResolution!]!
  jiraPriorities: [JiraPriority!]!
  getWebhookMetadata: WebhookMetadata
  webhooks: [WebhookStatus!]!
  webhookErrors(pageSize: Int, pageOffset: Int): PaginatedWebhookErrors
}

type Mutations {
  setAppSetting(key: String!, value: String!): SuccessResponse
  setGitlabCredentials(appUrl: String!, token: String!): SuccessResponse
  setDevToolsCredentials(
    clientId: String!
    clientToken: String!
  ): DevToolsStatus
  loadGitlabProject(projectId: String): SuccessResponse
  setProjectMapping(
    gitlabProjectId: String
    mapping: TransitionProjectMappingInput
  ): TransitionProjectMapping
  upsertProjectMappingComponent(
    component: MappingComponentInput!
  ): SuccessResponse
  deleteProjectMappingComponent(id: Int!): SuccessResponse
  upsertProjectMappingIssueType(
    issueType: MappingIssueTypeInput!
  ): SuccessResponse
  deleteProjectMappingIssueType(id: Int!): SuccessResponse
  upsertProjectMappingPriority(priority: MappingPriorityInput!): SuccessResponse
  deleteProjectMappingPriority(id: Int!): SuccessResponse
  upsertProjectMappingStatus(status: MappingStatusesInput!): SuccessResponse
  deleteProjectMappingStatus(id: Int!): SuccessResponse
  upsertProjectMappingVersion(version: MappingVersionInput!): SuccessResponse
  deleteProjectMappingVersion(id: Int!): SuccessResponse
  setWebhookMetadata(transitionKeywords: [String!]): SuccessResponse
  setDefaultWebhookTransition(
    openStatusIds: [String!]
    closeStatusIds: [String!]
    mergeStatusIds: [String!]
  ): SuccessResponse
  upsertWebhookTransitionMap(
    jiraProjectKey: String!
    openStatusIds: [String!]
    closeStatusIds: [String!]
    mergeStatusIds: [String!]
  ): SuccessResponse
  deleteWebhookTransitionMap(jiraProjectKey: String!): SuccessResponse
  createGitlabWebhooks(gitlabProjectId: String!): WebhookStatus
  processProject(gitlabProjectId: String): SuccessResponse
  clearMigrationProject(gitlabProjectId: String): SuccessResponse
  createJiraVersionFromMilestone(
    jiraProjectId: String!
    gitlabProjectId: String!
    milestoneId: String
  ): SuccessResponse
  migrateMilestones(
    jiraProjectId: String!
    gitlabProjectId: String!
  ): [MappingVersion!]
  retryAllFailures: SuccessResponse
  retryWebhook(id: String!): SuccessResponse
  deleteWebhookFailure(id: String!): SuccessResponse
  deleteAllWebhookFailures: SuccessResponse
}

schema {
  query: Queries
  mutation: Mutations
}
